import telebot
from telebot import types
import datetime
import database
import graphic
import sudoku
import field
import math
import re
import AI

PRIZE = ['ü•á', 'ü•à', 'ü•â']
GROW = ['üìà', '‚è∫', 'üìâ']
SOLVED = ['‚ùå', '‚úÖ']
NUM = ["0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"]
TOKEN = "1099904106:AAH0rNHEL-7T15gllpGzpqXr-Ewgdo9UuXc"
bot = telebot.TeleBot(TOKEN)


def get_prize(i: int) -> str:
	if i < len(PRIZE):
		return PRIZE[i]
	else:
		return '      ' * len(PRIZE[0])


def get_grow(grow: float) -> str:
	if grow > 0.0:
		return GROW[0]
	elif grow < 0.0:
		return GROW[2]
	else:
		return GROW[1]


def sign(num: float) -> str:
	if (num < 0):
		return str(num)
	elif (num > 0):
		return '+' + str(num)
	else:
		return ' ' + str(num)


def convert_to_emoji(solution, size = 9):
	ans = ''
	for i in range(size):
		for j in range(size):
			if solution[i][j] == 0:
				ans += "‚úñÔ∏è"
			else:
				ans += NUM[solution[i][j]]
			if not (j + 1) % 3:
				ans += "    "
		ans += '\n'
		if not (i + 1) % 3:
			ans += '\n'
	return ans


def checkTextMessage(message):
	temp = message.text.replace(' ', '').split('\n')

	while '' in temp:
		temp.remove('')

	if len(temp) != 9:
		return "–°—Ç—Ä–æ–∫ —Å—É–¥–æ–∫—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 9 —Å—Ç—Ä–æ–∫"

	for i in range(9):
		temp[i] = temp[i][1:-1].split(',')
		if len(temp[i]) != 9:
			return "–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å—É–¥–æ–∫—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 9 —á–∏—Å–µ–ª"
	
	puzzle = []
	for i in range(9):
		puzzle.append([])
		for j in range(9):
			temp[i][j] = temp[i][j].strip()
			if not temp[i][j].isnumeric():
				return "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏"
			if int(temp[i][j]) < 0 or int(temp[i][j]) > 9:
				return "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 0 –¥–æ 9"
			puzzle[i].append(int(temp[i][j]))
	return puzzle


def checkEmojiMessage(message):
	temp = message.text.replace("‚úñÔ∏è", NUM[0]).split('\n')
	while '' in temp:
		temp.remove('')

	if len(temp) != 9:
		return "–°—Ç—Ä–æ–∫ —Å—É–¥–æ–∫—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 9 —Å—Ç—Ä–æ–∫"

	for i in range(9):
		temp[i] = ''.join(filter(lambda x: x.isdigit(), temp[i]))
		if len(temp[i]) != 9:
			return "–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å—É–¥–æ–∫—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 9 —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 9"

	puzzle = []
	for i in range(9):
		puzzle.append([])
		for j in range(9):
			if not temp[i][j].isnumeric():
				return "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏"
			if int(temp[i][j]) < 0 or int(temp[i][j]) > 9:
				return "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 0 –¥–æ 9"
			puzzle[i].append(int(temp[i][j]))
	return puzzle
	

@bot.message_handler(commands=['start', 'reg'])
def start(message):
	if not message.from_user.username:
		bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–∞ @User). –ü–æ–∫–∞ username –Ω–µ –∑–∞–¥–∞–Ω, —è –Ω–µ –º–æ–≥—É –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
		return
	username = '@' + message.from_user.username

	if database.isUserExist(username):
		bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç—Ä–æ–µ –≤—Ä–µ–º—è')
		database.addUser(message.chat.id, username)
		bot.send_message(message.chat.id, '–û–∫, —Ç–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')


@bot.message_handler(commands=['unreg'])
def unreg(message):
	if not message.from_user.username:
		bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–∞ @User). –ü–æ–∫–∞ username –Ω–µ –∑–∞–¥–∞–Ω, —è –Ω–µ –º–æ–≥—É –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
		return
	username = '@' + message.from_user.username

	if not database.isUserExist(username):
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
	else:
		bot.send_message(message.chat.id, '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö? (–¥–∞\\–Ω–µ—Ç)')
		bot.register_next_step_handler(message, delete_profile)


def delete_profile(message):
	if not message.from_user.username:
		bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–∞ @User). –ü–æ–∫–∞ username –Ω–µ –∑–∞–¥–∞–Ω, —è –Ω–µ –º–æ–≥—É –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
		return
	username = '@' + message.from_user.username
	if message.text.lower() == '–¥–∞':
		database.deleteUser(username)
		bot.send_message(message.chat.id, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.')


@bot.message_handler(commands=['methods'])
def methods(message):
	if validate(message):
		bot.send_message(message.chat.id, database.get_methods_list())


@bot.message_handler(commands=['last_hero', 'last_hero_line', 'no_choise', 'who_if_not_me', 'naked_pairs', 'threesome', 'great_four', 'hidden_three', 'hidden_four'])
def send_method_with_1_example(message):
	if not validate(message):
		return
	method_name = message.text
	bot.send_message(message.chat.id, database.get_method_description(method_name))
	photo = open(database.method + method_name + '\\' + 'example.png', 'rb')
	bot.send_photo(message.chat.id, photo)


@bot.message_handler(commands=['hidden_pairs', 'indicating_combs', 'reduce_irreducible'])
def send_method_with_2_example(message):
	if not validate(message):
		return
	method_name = message.text
	for i in range(1, 3):
		bot.send_message(message.chat.id, database.get_method_description(method_name, '_' + str(i)))
		photo = open(database.method + method_name + '\\' + 'example' + '_' + str(i) + '.png', 'rb')
		bot.send_photo(message.chat.id, photo)


@bot.message_handler(commands=['level_raiting'])
def level_raiting(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	raiting = database.level_rating()
	table = ""

	for i, user in enumerate(raiting):
		if (i < 10 or user[0] == username):
			table += '{:>2}{}{:>7.3f} {}\n' . format(str(i + 1) + '.', get_prize(i), user[1], user[0])

	bot.send_message(message.chat.id, table)


@bot.message_handler(commands=['score_raiting'])
def score_raiting(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	raiting = database.score_rating()
	max_score = len(str(raiting[0][1]))
	table = ""

	for i, user in enumerate(raiting):
		if (i < 10 or user[0] == username):
			table += '{:>2}{}{} {}\n' . format(str(i + 1) + '.', get_prize(i), str(user[1]).rjust(max_score + 1, '.').replace('.', '  '), user[0])

	bot.send_message(message.chat.id, table)


@bot.message_handler(commands=['records'])
def score_raiting(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	records = database.records_list()
	table = ""

	for record in records:
		table += '{:>2}:  {}  -  {}\n' . format(record[0], record[1], record[2])

	bot.send_message(message.chat.id, table)


@bot.message_handler(commands=['level_graphics'])
def level_graphics(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if len(database.getUserHistory(username)) < 5:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ —Å—ã–≥—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑')
	else:
		graphic.get_graphic(username)
		photo = open(database.others + 'HISTORY.png', 'rb')
		bot.send_photo(message.chat.id, photo)


@bot.message_handler(commands=['history'])
def history(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	history = database.getUserHistory(username)
	table = ''

	if history != ['']:
		for row in history:
			row = row.split(' ')
			table += '{}{} {:<5.2f}  {}  {}\n' . format(SOLVED[int(row[0])], get_grow(float(row[3])), float(row[1]), row[2], sign(float(row[3])).ljust(5))
		bot.send_message(message.chat.id, table)
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª–∏')


@bot.message_handler(commands=['my_score'])
def my_score(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	bot.send_message(message.chat.id, f'–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç = {format(database.getUserScore(username))}')


@bot.message_handler(commands=['my_level'])
def my_level(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	bot.send_message(message.chat.id, '–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å = ' + str('{:.2f}' . format(database.getUserLevel(username))))


@bot.message_handler(commands=['my_rank'])
def my_rank(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	bot.send_message(message.chat.id, '–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ = ' + str(sudoku.getRank(round(database.getUserLevel(username)))))


@bot.message_handler(commands=['challenge_mode'])
def challenge_mode(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if database.getGamemode(username) != 'challenge':
		database.setGamemode('challenge', username)
		bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ challenge, —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–º–∞–Ω–¥—ã /next_sudoku –ø–æ–π–¥—ë—Ç –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –≤—ã —Ä–µ—à–∏—Ç–µ —Å—É–¥–æ–∫—É, –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –∏–ª–∏ –ø–æ–Ω–∏–∂–∞—Ç—å—Å—è')
		database.resetUserTime(username)
	else:
		bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ challenge')


@bot.message_handler(commands=['freeplay_mode'])
def freeplay_mode(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if database.getGamemode(username) == 'challenge' and database.isUserPlay(username):
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–±–æ—Ä–∫—É –ø—Ä–æ—à–ª–æ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ /give_up (–≤–∞—à —É—Ä–æ–≤–µ–Ω—å –±—É–¥–µ—Ç –ø–æ–Ω–∏–∂–µ–Ω)')
	elif database.getGamemode(username) != 'freeplay':
		database.setGamemode('freeplay', username)
		bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ freeplay, —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –∫–æ–º–º–∞–Ω–¥—ã /next_sudoku –æ—Ç—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –ø–æ—Å–ª–µ–¥—É–µ—Ç, –∞ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–µ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –∏–ª–∏ –ø–æ–Ω–∏–∂–∞—Ç—å—Å—è')
	else:
		bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ freeplay')


@bot.message_handler(commands=['open_cell'])
def open_cell(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if database.isUserPlay(username):
		bot.send_message(message.chat.id, '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ª—é–±—É—é –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º —Å—É–¥–æ–∫—É –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (—Å—Ç—Ä–æ–∫–∞ —Å—Ç–æ–ª–±–µ—Ü).')
		bot.register_next_step_handler(message, parse_cell)
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


def parse_cell(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username
	pattern = re.compile(r'[({][1-9].[1-9][})]')

	print(message.text)
	if not pattern.match(message.text):
		bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª–µ—Ç–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ (—Å—Ç—Ä–æ–∫–∞ —Å—Ç–æ–ª–±–µ—Ü). –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë /open_cell')
	elif database.getUserPuzzle(username)[int(message.text[1]) - 1][int(message.text[-2]) - 1] != 0:
		bot.send_message(message.chat.id, '–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë /open_cell')
	elif database.isUserPlay(username):
		database.updateUserPuzzle(int(message.text[1]) - 1, int(message.text[-2]) - 1, username)
		field.draw_sudoku(database.getUserPuzzle(username), database.getUserCurrent(username))
		photo = open(database.others + 'sudoku.jpg', 'rb')
		AI.cell_penalty(username)
		bot.send_photo(message.chat.id, photo)
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['check_correctness'])
def check_correctness(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if database.isUserPlay(username):
		field.draw_sudoku_correct(database.getUserPuzzle(username), database.getUserCurrent(username), database.getUserSolution(username))
		photo = open(database.others + 'correct.jpg', 'rb')
		AI.check_penalty(username)
		bot.send_photo(message.chat.id, photo)
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['get_tip'])
def get_tip(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if database.isUserPlay(username):
		penalty_cell = AI.avg_time(database.getUserLevel(username)) * AI.cell_penalty_koef * 60
		penalty_check = AI.avg_time(database.getUserLevel(username)) * AI.check_penalty_koef * 60
		bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ø–æ–¥—Å–∫–∞–∑–∫—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∏–∂–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –º–æ–≥—É—Ç –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã –∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è.\n\n/check_correctness  +{penalty_check:.0f} —Å–µ–∫—É–Ω–¥ –∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è\n/open_cell +{penalty_cell:.0f} —Å–µ–∫—É–Ω–¥ –∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è')
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['possible'])
def possible(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if database.isUserPlay(username):
		field.draw_sudoku_possible(database.getUserPuzzle(username), database.getUserCurrent(username))
		photo = open(database.others + 'possible.jpg', 'rb')
		bot.send_photo(message.chat.id, photo)
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['give_up'])
def give_up(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if database.getGamemode(username) == 'freeplay':
		bot.send_message(message.chat.id, '–í—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ freeplay, —Å–¥–∞–≤–∞—Ç—å—Å—è —Å–º—ã—Å–ª–∞ –Ω–µ—Ç')
	elif database.isUserPlay(username):
		AI.recount_level(username, True)
		bot.send_message(message.chat.id, '–í—ã —Å–¥–∞–ª–∏—Å—å, –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –±—ã–ª –ø–æ–Ω–∏–∂–µ–Ω (—Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å /my_level)')
		database.resetUserTime(username)
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['current_text'])
def current_text(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username
	
	if database.isUserPlay(username):
		bot.send_message(message.chat.id, sudoku.getStrPuzzle(database.getUserCurrent(username)))
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['current_emoji'])
def current_emoji(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username
	
	if database.isUserPlay(username):
		bot.send_message(message.chat.id, convert_to_emoji(database.getUserCurrent(username)))
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['current_photo'])
def current_photo(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username
	
	if database.isUserPlay(username):
		field.draw_sudoku(database.getUserPuzzle(username), database.getUserCurrent(username))
		photo = open(database.others + 'sudoku.jpg', 'rb')
		bot.send_photo(message.chat.id, photo)
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['current_sudoku'])
def current_sudoku(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username
	
	if database.isUserPlay(username):
		bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ñ–æ—Ä–º–∞—Ç:\n\n/current_text - —Ç–µ–∫—Å—Ç–æ–≤—ã–π\n/current_emoji - –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏\n/current_photo - –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ')
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['initial_text'])
def initial_text(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username
	
	if database.isUserPlay(username):
		bot.send_message(message.chat.id, sudoku.getStrPuzzle(database.getUserPuzzle(username)))
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['initial_emoji'])
def initial_emoji(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username
	
	if database.isUserPlay(username):
		bot.send_message(message.chat.id, convert_to_emoji(database.getUserPuzzle(username)))
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['initial_photo'])
def initial_photo(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username
	
	if database.isUserPlay(username):
		field.draw_sudoku(database.getUserPuzzle(username), database.getUserPuzzle(username))
		photo = open(database.others + 'sudoku.jpg', 'rb')
		bot.send_photo(message.chat.id, photo)
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['initial_sudoku'])
def initial_sudoku(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username
	
	if database.isUserPlay(username):
		bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ñ–æ—Ä–º–∞—Ç:\n\n/initial_text - —Ç–µ–∫—Å—Ç–æ–≤—ã–π\n/initial_emoji - –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏\n/initial_photo - –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ')
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['next_sudoku'])
def next_sudoku(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username
	
	if database.isUserPlay(username) and database.getGamemode(username) != 'freeplay':
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–±–æ—Ä–∫—É –ø—Ä–æ—à–ª–æ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ /give_up (–≤–∞—à —É—Ä–æ–≤–µ–Ω—å –±—É–¥–µ—Ç –ø–æ–Ω–∏–∂–µ–Ω)')
	else:
		database.nextPuzzle(username)
		database.setUserTime(datetime.datetime.today(), username)
		initial_photo(message)


@bot.message_handler(content_types=['text'])
def answerTheMessage(message):
	if not validate(message):
		return

	username = '@' + message.from_user.username

	if database.isUserPlay(username):
		puzzle_1 = checkTextMessage(message)
		puzzle_2 = checkEmojiMessage(message)
		puzzle = None

		if type(puzzle_1) is str and type(puzzle_2) is str:
			bot.reply_to(message, puzzle_1)
			return
		elif type(puzzle_1) is not str:
			puzzle = puzzle_1
		else:
			puzzle = puzzle_2


		if not sudoku.are_equal(puzzle, database.getUserPuzzle(username)):
			bot.send_message(message.chat.id, '–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ç–æ —Å—É–¥–æ–∫—É')
		elif not sudoku.isCorrect(puzzle):
			bot.send_message(message.chat.id, '–°—É–¥–æ–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏ (–ø–æ–≤—Ç–æ—Ä —Å –±–ª–æ–∫–µ/—Å—Ç—Ä–æ–∫–µ/—Å—Ç–æ–ª–±—Ü–µ)')
		elif not sudoku.isSolved(puzzle):
			database.setUserCurrent(puzzle, username)
			bot.send_message(message.chat.id, '–í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –Ω–µ –≤—Å–µ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏')
		elif True or database.isCorrectSolution(puzzle, username):
			database.setUserCurrent(puzzle, username)
			current_photo(message)

			diff = database.getUserLevel(username)
			time = database.solvingTime(username)

			if database.is_new_record(time, diff):
				prev = database.get_record(diff)
				bot.send_message(message.chat.id, f'–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∫–æ—Ä–¥:\n{prev[0]} - {prev[1]}')
				database.update_record(time, diff, username)

			AI.recount_level(username)

			time = database.convert(time)
			bot.send_message(message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–∏–ª–∏ —Å—É–¥–æ–∫—É –∑–∞ {}.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ—à–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /next_sudoku' . format(time))
			database.resetUserTime(username)
		else:
			bot.send_message(message.chat.id, '–£–≤—ã, –Ω–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ')
	else:
		bot.send_message(message.chat.id, '–í—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É, –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ /next_sudoku')


def validate(message) -> bool:
	if not message.from_user.username:
		bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–∞ @User). –ü–æ–∫–∞ username –Ω–µ –∑–∞–¥–∞–Ω, —è –Ω–µ –º–æ–≥—É –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
		return False
	elif not database.isUserExist('@' + message.from_user.username):
		bot.send_message(message.chat.id, '–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start')
		return False
	else:
		database.udateLastUserActivity('@' + message.from_user.username)
		return True


for user in database.unactive_users(14):
	try:
		bot.send_message(database.getID(user), '–û—Ç –≤–∞—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –º–Ω–µ –ø—Ä–∏—à–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞—Å –∏–∑ –±–∞–∑—ã –¥—ã–Ω–Ω—ã—Ö')
	except telebot.apihelper.ApiException:
		pass
	database.deleteUser(user)
for user in database.unactive_users(2):
	if database.isUserPlay(user):
		AI.recount_level(user, True)
	database.resetUserTime(user)
	if (datetime.datetime.today() - database.getLastUserAlert(user)).days >= 2:
		delta = datetime.datetime.today() - database.getLastUserActivity(user)
		print(f'{user} {delta}')
		try:
			bot.send_message(database.getID(user), f'–û—Ç –≤–∞—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {delta.days} –¥–Ω–µ–π –∏ {delta.seconds // 3600} —á–∞—Å–∞(–æ–≤) –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.') 
			bot.send_message(database.getID(user), '–ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é 14 —Å—É—Ç–æ–∫ –º–Ω–µ –ø—Ä–∏–π–¥–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –≤–∞—Å –∏ –≤—Å–µ –≤–∞—à–∏ –∏–≥—Ä–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã —Å –ø–æ—Ç–µ—Ä–µ–π –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–º–∞–Ω–¥—ã /unreg')
		except telebot.apihelper.ApiException:
			database.deleteUser(user)
		else:
			database.udateLastUserAlert(user)

bot.polling(none_stop = True, interval = 0)
#python C:\Users\HP_650\Desktop\Python_BOT\bot.py
