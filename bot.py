from _thread import start_new_thread
from telebot import types
from time import sleep
import telebot
import datetime
import database
import graphic
import sudoku
import backup
import field
import math
import AI

PRIZE = ['ü•á', 'ü•à', 'ü•â']
GROW = ['üìà', '‚è∫', 'üìâ']
SOLVED = ['‚ùå', '‚úÖ']
NUM = ["0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"]
TOKEN = '1142618827:AAFWbpi1aXGGVb8wFMAbSUFDm9BWhWj6AQU'
bot = telebot.TeleBot(TOKEN)


def get_prize(i: int) -> str:
	if i < len(PRIZE):
		return PRIZE[i]
	else:
		return '      ' * len(PRIZE[0])


def get_grow(grow: float) -> str:
	if grow > 0.0:
		return GROW[0]
	elif grow < 0.0:
		return GROW[2]
	else:
		return GROW[1]


def sign(num: float) -> str:
	if (num < 0):
		return str(num)
	elif (num > 0):
		return '+' + str(num)
	else:
		return ' ' + str(num)


def convert_to_emoji(solution, size = 9):
	ans = ''
	for i in range(size):
		for j in range(size):
			if solution[i][j] == 0:
				ans += "‚úñÔ∏è"
			else:
				ans += NUM[solution[i][j]]
			if not (j + 1) % 3:
				ans += "    "
		ans += '\n'
		if not (i + 1) % 3:
			ans += '\n'
	return ans


def checkTextMessage(message):
	temp = message.text.replace(' ', '').split('\n')

	while '' in temp:
		temp.remove('')

	if len(temp) != 9:
		return "–°—Ç—Ä–æ–∫ —Å—É–¥–æ–∫—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 9 —Å—Ç—Ä–æ–∫"

	for i in range(9):
		temp[i] = temp[i][1:-1].split(',')
		if len(temp[i]) != 9:
			return "–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å—É–¥–æ–∫—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 9 —á–∏—Å–µ–ª"
	
	puzzle = []
	for i in range(9):
		puzzle.append([])
		for j in range(9):
			temp[i][j] = temp[i][j].strip()
			if not temp[i][j].isnumeric():
				return "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏"
			if int(temp[i][j]) < 0 or int(temp[i][j]) > 9:
				return "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 0 –¥–æ 9"
			puzzle[i].append(int(temp[i][j]))
	return puzzle


def checkEmojiMessage(message):
	temp = message.text.replace("‚úñÔ∏è", NUM[0]).split('\n')
	while '' in temp:
		temp.remove('')

	if len(temp) != 9:
		return "–°—Ç—Ä–æ–∫ —Å—É–¥–æ–∫—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 9 —Å—Ç—Ä–æ–∫"

	for i in range(9):
		temp[i] = ''.join(filter(lambda x: x.isdigit(), temp[i]))
		if len(temp[i]) != 9:
			return "–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å—É–¥–æ–∫—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 9 —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 9"

	puzzle = []
	for i in range(9):
		puzzle.append([])
		for j in range(9):
			if not temp[i][j].isnumeric():
				return "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏"
			if int(temp[i][j]) < 0 or int(temp[i][j]) > 9:
				return "–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –æ—Ç 0 –¥–æ 9"
			puzzle[i].append(int(temp[i][j]))
	return puzzle


@bot.message_handler(commands=['start', 'reg'])
def start(message):
	if not message.from_user.username:
		bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–∞ @User). –ü–æ–∫–∞ username –Ω–µ –∑–∞–¥–∞–Ω, —è –Ω–µ –º–æ–≥—É –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
		return
	username = '@' + message.from_user.username

	if database.isUserExist(username):
		bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ–∂–∏–¥–∞–π—Ç–µ, –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç')
		database.addUser(message.chat.id, username)
		bot.send_message(message.chat.id, '–û–∫, —Ç–µ–ø–µ—Ä—å –≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
		menu(message)


@bot.message_handler(commands=['unreg'])
def unreg(message):
	if validate(message):
		keyboard = telebot.types.ReplyKeyboardMarkup(True)
		keyboard.row('–î–∞', '–ù–µ—Ç')
		bot.send_message(message.chat.id, '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?', reply_markup=keyboard)
		bot.register_next_step_handler(message, delete_profile)


@bot.message_handler(commands=['recovery'])
def recovery(message):
	if validate(message):
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='–ú–æ–π –ø–∞—Ä–æ–ª—å', callback_data='password'))
		bot.send_message(message.chat.id, '–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞ \'@username password\', –≥–¥–µ username - –Ω–∏–∫–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –∞ password - —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å.', reply_markup=markup)


@bot.message_handler(commands=['password'])
def password(message):
	if validate(message):
		username = '@' + message.from_user.username
		database.updatePassword(username)
		bot.send_message(message.chat.id, '–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å: {}\n–ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É!' . format(database.getPassword(username)))


@bot.message_handler(commands=['menu'])
def menu(message):
	if validate(message):
		markup = telebot.types.InlineKeyboardMarkup()
		if database.isUserPlay('@' + message.from_user.username):
			markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É', callback_data='current_photo'))
		else:
			markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
		markup.add(telebot.types.InlineKeyboardButton(text='üìö –ú–µ—Ç–æ–¥—ã —Ä–µ—à–µ–Ω–∏—è', callback_data='methods'))
		markup.add(telebot.types.InlineKeyboardButton(text='üìÜ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π', callback_data='history'))
		if database.getUserCount('@' + message.from_user.username)[0] >= 5:
			markup.add(telebot.types.InlineKeyboardButton(text='üìâ –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è', callback_data='level_graphics'))
		markup.add(telebot.types.InlineKeyboardButton(text='üïπ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∏–≥—Ä—ã', callback_data='change_mode'))
		markup.add(telebot.types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', callback_data='change_theme'))
		markup.add(telebot.types.InlineKeyboardButton(text='üèã –ú–æ–π —É—Ä–æ–≤–µ–Ω—å', callback_data='my_level'))
		markup.add(telebot.types.InlineKeyboardButton(text='üéó –ú–æ–π —Ä–∞–Ω–≥', callback_data='my_rank'))
		markup.add(telebot.types.InlineKeyboardButton(text='üíØ –ú–æ–π —Å—á—ë—Ç', callback_data='my_score'))
		markup.add(telebot.types.InlineKeyboardButton(text='üèÖ –†–µ–π—Ç–∏–Ω–≥–∏', callback_data='raitings'))
		markup.add(telebot.types.InlineKeyboardButton(text='üèÜ –†–µ–∫–æ—Ä–¥—ã', callback_data='records'))
		markup.add(telebot.types.InlineKeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats'))
		markup.add(telebot.types.InlineKeyboardButton(text='‚ùì –ü–æ–º–æ—â—å', callback_data='help'))
		markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
		bot.send_message(message.chat.id, '–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑–∞–≤–∞—Ç—å—Å—è –∫–æ–º–º–∞–Ω–¥–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=markup)


@bot.message_handler(commands=['raitings'])
def raitings(message, back_menu = False):
	if validate(message):
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏', callback_data='success_raiting'), telebot.types.InlineKeyboardButton(text='‚úÖ –†–µ—à–µ–Ω–Ω—ã–µ —Å—É–¥–æ–∫—É', callback_data='count_raiting'))
		markup.add(telebot.types.InlineKeyboardButton(text='üèã –£—Ä–æ–≤–µ–Ω—å', callback_data='level_raiting'), telebot.types.InlineKeyboardButton(text='üíØ –û—á–∫–∏', callback_data='score_raiting'))
		if back_menu:
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_menu'))
		bot.send_message(message.chat.id, '–î–æ—Å—Ç—É–ø–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–º–∞—Ç–µ—Ä–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö:', reply_markup=markup)


@bot.message_handler(commands=['authors'])
def authors(message):
	if validate(message):
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_help'))
		bot.send_message(message.chat.id, '–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–æ–º –•–ù–£–†–≠ –∫–∞—Ñ–µ–¥—Ä—ã –ò–ò - @WeNoM_21\n–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏ –∏ –æ—Ç–∑—ã–≤—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ –õ–° –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤—ã—à–µ –∞–¥—Ä–µ—Å—É.', reply_markup=markup)


@bot.message_handler(commands=['rules'])
def rules(message):
	if validate(message):
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
		markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_help'))
		bot.send_photo(message.chat.id, open(database.others + 'rules.jpg', 'rb'), database.__read(database.others + 'rules.txt'), reply_markup=markup)


@bot.message_handler(commands=['system'])
def system(message):
	if validate(message):
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
		markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_help'))
		bot.send_message(message.chat.id, database.__read(database.others + 'system.txt'), reply_markup=markup)


@bot.message_handler(commands=['manual'])
def manual(message):
	if validate(message):
		bot.send_message(message.chat.id, database.__read(database.others + 'manual_1.txt'))
		bot.send_media_group(message.chat.id, [types.InputMediaPhoto(open(database.others + photo + '.jpg', 'rb')) for photo in ['manual_text', 'manual_emoji']])

		bot.send_message(message.chat.id, database.__read(database.others + 'manual_2.txt'))
		bot.send_media_group(message.chat.id, [types.InputMediaPhoto(open(database.others + photo + '.jpg', 'rb')) for photo in ['manual_mixed_text', 'manual_mixed_emoji', 'manual_mixed']])

		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku_from_manual'))
		markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_help_from_manual'))
		bot.send_message(message.chat.id, database.__read(database.others + 'manual_3.txt'), reply_markup=markup)


@bot.message_handler(commands=['help'])
def help(message, back_menu=True):
	if validate(message):
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?', callback_data='manual'))
		markup.add(telebot.types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏–ª–∞ —Å—É–¥–æ–∫—É', callback_data='rules'))
		markup.add(telebot.types.InlineKeyboardButton(text='C–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è', callback_data='system'))
		markup.add(telebot.types.InlineKeyboardButton(text='–ê–≤—Ç–æ—Ä—ã/–ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='authors'))
		if back_menu:
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_menu'))
		bot.send_message(message.chat.id, '–£ –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?\n–ï—Å–ª–∏ –¥–∞, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:', reply_markup=markup)


def delete_profile(message):
	if not message.from_user.username:
		bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–∞ @User). –ü–æ–∫–∞ username –Ω–µ –∑–∞–¥–∞–Ω, —è –Ω–µ –º–æ–≥—É –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
		return
	username = '@' + message.from_user.username
	if message.text.lower() == '–¥–∞':
		database.deleteUser(username)
		bot.send_message(message.chat.id, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.', reply_markup=telebot.types.ReplyKeyboardRemove())
	else:
		bot.send_message(message.chat.id, '–Ø —Ä–∞–¥, —á—Ç–æ –≤—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏', reply_markup=telebot.types.ReplyKeyboardRemove())	


@bot.message_handler(commands=['stats'])
def stats(message):
	if validate(message):
		username = '@' + message.from_user.username
		count = database.getUserCount(username)
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
		bot.send_message(message.chat.id, f'–í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏:   {100 * count[0] / max(1, (count[0] + count[1])):.4f}%\nüî¢–í—Å–µ–≥–æ —Å—É–¥–æ–∫—É:      {count[0] + count[1]}\n‚úÖ–†–µ—à–µ–Ω–æ —Å—É–¥–æ–∫—É:  {count[0]}\n‚ùå–ù–µ —Ä–µ—à–µ–Ω–æ:         {count[1]}', reply_markup=markup)


@bot.message_handler(commands=['methods'])
def methods(message, back_menu=False):
	if validate(message):
		markup = telebot.types.InlineKeyboardMarkup()
		if back_menu:
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_menu'))
		else:
			markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
		bot.send_message(message.chat.id, database.get_methods_list(), reply_markup=markup)


@bot.message_handler(commands=['last_hero', 'last_hero_line', 'no_choise', 'who_if_not_me', 'naked_pairs', 'threesome', 'great_four', 'hidden_three', 'hidden_four'])
def send_method_with_1_example(message):
	if not validate(message):
		return
	method_name = message.text
	bot.send_message(message.chat.id, database.get_method_description(method_name))
	photo = open(database.method + method_name + '\\' + 'example.png', 'rb')
	bot.send_photo(message.chat.id, photo)


@bot.message_handler(commands=['hidden_pairs', 'indicating_combs', 'reduce_irreducible'])
def send_method_with_2_example(message):
	if not validate(message):
		return
	method_name = message.text
	for i in range(1, 3):
		bot.send_message(message.chat.id, database.get_method_description(method_name, '_' + str(i)))
		photo = open(database.method + method_name + '\\' + 'example' + '_' + str(i) + '.png', 'rb')
		bot.send_photo(message.chat.id, photo)


@bot.message_handler(commands=['level_raiting'])
def level_raiting(message):
	if validate(message):
		username = '@' + message.from_user.username

		raiting = database.level_rating()
		table = ''

		for i, user in enumerate(raiting):
			if (i < 10 or user[0] == username):
				table += '{:>2}{}{:>7.3f} {}\n' . format(str(i + 1) + '.', get_prize(i), user[1], user[0])

		count = database.getUserCount(username)
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
		bot.send_message(message.chat.id, table, reply_markup=markup)


@bot.message_handler(commands=['success_raiting'])
def success_raiting(message):
	if validate(message):
		username = '@' + message.from_user.username

		raiting = database.success_rating()
		table = ''

		for i, user in enumerate(raiting):
			if (i < 10 or user[0] == username):
				table += '{:>2}{}{:>7.4f}% {}\n' . format(str(i + 1) + '.', get_prize(i), user[1], user[0])

		count = database.getUserCount(username)
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
		bot.send_message(message.chat.id, table, reply_markup=markup)


@bot.message_handler(commands=['count_raiting'])
def count_raiting(message):
	if validate(message):
		username = '@' + message.from_user.username

		raiting = database.count_raiting()
		table = ''

		for i, user in enumerate(raiting):
			if (i < 10 or user[0] == username):
				table += '{:>2}{}{:>4} {}\n' . format(str(i + 1) + '.', get_prize(i), user[1], user[0])

		count = database.getUserCount(username)
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
		bot.send_message(message.chat.id, table, reply_markup=markup)


@bot.message_handler(commands=['score_raiting'])
def score_raiting(message):
	if validate(message):
		username = '@' + message.from_user.username

		raiting = database.score_rating()
		max_score = len(str(raiting[0][1]))
		table = ""

		for i, user in enumerate(raiting):
			if (i < 10 or user[0] == username):
				table += '{:>2}{}{} {}\n' . format(str(i + 1) + '.', get_prize(i), str(user[1]).rjust(max_score + 1, '.').replace('.', '  '), user[0])

		count = database.getUserCount(username)
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
		bot.send_message(message.chat.id, table, reply_markup=markup)


@bot.message_handler(commands=['records'])
def records(message):
	if validate(message):
		username = '@' + message.from_user.username

		records = database.records_list()
		table = ""

		for record in records:
			table += '{:>2}:  {}  -  {}\n' . format(record[0], record[1], record[2])

		count = database.getUserCount(username)
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
		bot.send_message(message.chat.id, table, reply_markup=markup)


@bot.message_handler(commands=['level_graphics'])
def level_graphics(message):
	if validate(message):
		username = '@' + message.from_user.username

		if database.getUserCount(username)[0] < 5:
			bot.send_message(message.chat.id, '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ—à–∏—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 5 —Å—É–¥–æ–∫—É.')
		else:
			graphic.draw(username)
			photo = open(database.others + 'HISTORY.png', 'rb')

			count = database.getUserCount(username)
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
			bot.send_photo(message.chat.id, photo, reply_markup=markup)


@bot.message_handler(commands=['history'])
def history(message):
	if validate(message):
		username = '@' + message.from_user.username

		history = database.getUserHistory(username)
		table = ''

		if history != ['']:
			for row in history:
				row = row.split(' ')
				table += '{}{} {:<5.2f}  {}  {}\n' . format(SOLVED[int(row[0])], get_grow(float(row[3])), float(row[1]), row[2], sign(float(row[3])).ljust(5))

			count = database.getUserCount(username)
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
			bot.send_message(message.chat.id, table, reply_markup=markup)
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –∏—Å—Ç–æ—Ä–∏—é, —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª–∏', reply_markup=markup)


@bot.message_handler(commands=['my_score'])
def my_score(message):
	if validate(message):
		username = '@' + message.from_user.username

		count = database.getUserCount(username)
		markup = telebot.types.InlineKeyboardMarkup()
		bot.send_message(message.chat.id, f'–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç = {format(database.getUserScore(username))}', reply_markup=markup)


@bot.message_handler(commands=['my_level'])
def my_level(message):
	if validate(message):
		username = '@' + message.from_user.username

		count = database.getUserCount(username)
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
		bot.send_message(message.chat.id, '–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å = ' + str('{:.2f}' . format(database.getUserLevel(username))), reply_markup=markup)


@bot.message_handler(commands=['my_rank'])
def my_rank(message):
	if validate(message):
		username = '@' + message.from_user.username

		count = database.getUserCount(username)
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ùå –°–∫—Ä—ã—Ç—å', callback_data='back'))
		bot.send_message(message.chat.id, '–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ = ' + str(sudoku.getRank(round(database.getUserLevel(username)))), reply_markup=markup)


@bot.message_handler(commands=['change_theme'])
def change_theme(message, back_menu=False):
	if validate(message):
		username = '@' + message.from_user.username

		if database.isUserPlay(username):
			bot.send_message(message.chat.id, '–ü–æ–∫–∞ –≤—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–æ–∫—É, —Ç–µ–º—É –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å.')
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			for theme in field.THEMES.keys():
				if database.getTheme(username) != theme:
					markup.add(telebot.types.InlineKeyboardButton(text=field.THEMES[theme]['title'], callback_data='change_theme' + '_' + theme))
			if back_menu:
				markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_menu'))
			else:
				markup.add(telebot.types.InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data='back'))
			bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:', reply_markup=markup)


@bot.message_handler(commands=['change_mode'])
def change_mode(message):
	if validate(message):
		username = '@' + message.from_user.username

		if database.isUserPlay(username):
			bot.send_message(message.chat.id, '–ü–æ–∫–∞ –≤—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ —Å—É–¥–æ–∫—É, —Ä–µ–∂–∏–º –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å.')
		else:
			if database.getGamemode(username) == 'challenge':
				freeplay_mode(message)
			else:
				challenge_mode(message)


@bot.message_handler(commands=['challenge_mode'])
def challenge_mode(message):
	if validate(message):
		username = '@' + message.from_user.username

		if database.getGamemode(username) == 'challenge':
			bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ challenge')
		elif database.isUserPlay(username):
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='current_photo'))
			markup.add(telebot.types.InlineKeyboardButton(text='üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏', callback_data='get_tip'))
			markup.add(telebot.types.InlineKeyboardButton(text='üè≥Ô∏è –°–¥–∞—Ç—å—Å—è', callback_data='give_up'))
			bot.send_message(message.chat.id, '–ü–æ–∫–∞ –≤—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—É–¥–æ–∫—É, —Ä–µ–∂–∏–º –∏–≥—Ä—ã –Ω–µ –≤—ã–π–¥–µ—Ç', reply_markup=markup)
		else:
			database.setGamemode('challenge', username)
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ challenge, —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –Ω–∞—á–Ω—ë—Ç–µ –∏–≥—Ä—É, –ø–æ–π–¥—ë—Ç –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –±—ã—Å—Ç—Ä–æ –≤—ã —Ä–µ—à–∏—Ç–µ —Å—É–¥–æ–∫—É, –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –∏–ª–∏ –ø–æ–Ω–∏–∂–∞—Ç—å—Å—è', reply_markup=markup)


@bot.message_handler(commands=['freeplay_mode'])
def freeplay_mode(message):
	if validate(message):
		username = '@' + message.from_user.username

		if database.getGamemode(username) == 'freeplay':
			bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ freeplay')
		elif database.isUserPlay(username):
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='current_photo'))
			markup.add(telebot.types.InlineKeyboardButton(text='üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏', callback_data='get_tip'))
			markup.add(telebot.types.InlineKeyboardButton(text='üè≥Ô∏è –°–¥–∞—Ç—å—Å—è', callback_data='give_up'))
			bot.send_message(message.chat.id, '–ü–æ–∫–∞ –≤—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—É–¥–æ–∫—É, —Ä–µ–∂–∏–º –∏–≥—Ä—ã –Ω–µ –≤—ã–π–¥–µ—Ç', reply_markup=markup)
		else:
			database.setGamemode('freeplay', username)
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ä–µ–∂–∏–º–µ freeplay, —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –Ω–∞—á–Ω—ë—Ç–µ –∏–≥—Ä—É, –æ—Ç—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –ø–æ—Å–ª–µ–¥—É–µ—Ç, –∞ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–µ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –∏–ª–∏ –ø–æ–Ω–∏–∂–∞—Ç—å—Å—è', reply_markup=markup)


@bot.message_handler(commands=['open_cell'])
def open_cell(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if database.isUserPlay(username):
		markup = telebot.types.InlineKeyboardMarkup()
		empty_rows = []
		for i, row in enumerate(database.getUserPuzzle(username)):
			if row.count(0) != 0:
				empty_rows.append(telebot.types.InlineKeyboardButton(text=f'{i + 1}-–π —Ä—è–¥', callback_data='open_cell_row_' + str(i)))
		markup.add(*empty_rows)
		markup.add(telebot.types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='back'))

		field.draw_sudoku(puzzle=database.getUserPuzzle(username), current=database.getUserCurrent(username), solution=None, theme=database.getTheme(username))
		bot.send_photo(message.chat.id, open(database.others + 'sudoku.jpg', 'rb'), '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ª—é–±—É—é –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º —Å—É–¥–æ–∫—É –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ø–µ—Ä–≤–∞ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–µ–ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫:', reply_markup=markup)
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['check_correctness'])
def check_correctness(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if database.isUserPlay(username):
		field.draw_sudoku(puzzle=database.getUserPuzzle(username), current=database.getUserCurrent(username), solution=database.getUserSolution(username), correct=True, theme=database.getTheme(username))
		AI.check_penalty(username)
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='current_sudoku_not_delete'))
		bot.send_photo(message.chat.id, open(database.others + 'sudoku.jpg', 'rb'), reply_markup=markup)
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['get_tip'])
def get_tip(message):
	if validate(message):
		username = '@' + message.from_user.username

		if database.isUserPlay(username):
			penalty_cell = AI.avg_time(database.getUserLevel(username)) * AI.cell_penalty_koef * 60
			penalty_check = AI.avg_time(database.getUserLevel(username)) * AI.check_penalty_koef * 60

			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text=f'–û—Ç–∫—Ä—ã—Ç—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É (+{penalty_cell:.0f})', callback_data='open_cell'))
			markup.add(telebot.types.InlineKeyboardButton(text=f'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ (+{penalty_check:.0f})', callback_data='check_correctness'))
			markup.add(telebot.types.InlineKeyboardButton(text='–ü–æ–¥—Å–≤–µ—Ç–∏—Ç—å —Ü–∏—Ñ—Ä—É (+0)', callback_data='highlight_num'))
			markup.add(telebot.types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–µ–∫–∏ (+0)', callback_data='possible'))
			markup.add(telebot.types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='back'))
			
			bot.send_message(message.chat.id, f'üí°–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –ø–æ–¥—Å–∫–∞–∑–∫—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∏–∂–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –º–æ–≥—É—Ç –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã –∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ—à–µ–Ω–∏—è –≤ –≤–∏–¥–µ –Ω–µ–∫–æ—Ç—Ä–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—É–Ω–¥.', reply_markup=markup)
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['possible'])
def possible(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if database.isUserPlay(username):
		field.draw_sudoku(puzzle=database.getUserPuzzle(username), current=database.getUserCurrent(username), possible=True, theme=database.getTheme(username))
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='current_photo_not_delete'))
		bot.send_photo(message.chat.id, open(database.others + 'sudoku.jpg', 'rb'), reply_markup=markup)
	else:
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
		bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º —Å—Ç–µ–∫–∏ (–≤–æ–∑–º–æ–∂–Ω—ã–µ —á–∏—Å–ª–∞) —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É', reply_markup=markup)


@bot.message_handler(commands=['current_text'])
def current_text(message):
	if validate(message):
		username = '@' + message.from_user.username
		
		if database.isUserPlay(username):
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text=f'{NUM[3]}‚úñÔ∏è{NUM[6]}', callback_data='current_emoji'), telebot.types.InlineKeyboardButton(text='üåá', callback_data='current_photo'))
			markup.add(telebot.types.InlineKeyboardButton(text='üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏', callback_data='get_tip_not_delete'))
			bot.send_message(message.chat.id, sudoku.getStrPuzzle(database.getUserCurrent(username)), reply_markup=markup)
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º —Ç–µ–∫—É—â–µ–µ —Å—É–¥–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É', reply_markup=markup)


@bot.message_handler(commands=['current_emoji'])
def current_emoji(message):
	if validate(message):
		username = '@' + message.from_user.username
		
		if database.isUserPlay(username):
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='[9, 0, 5]', callback_data='current_text'), telebot.types.InlineKeyboardButton(text='üåá', callback_data='current_photo'))
			markup.add(telebot.types.InlineKeyboardButton(text='üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏', callback_data='get_tip_not_delete'))
			bot.send_message(message.chat.id, convert_to_emoji(database.getUserCurrent(username)), reply_markup=markup)
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º —Ç–µ–∫—É—â–µ–µ —Å—É–¥–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É', reply_markup=markup)


@bot.message_handler(commands=['current_photo'])
def current_photo(message):
	if validate(message):
		username = '@' + message.from_user.username
		
		if database.isUserPlay(username):
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='[9, 0, 5]', callback_data='current_text'), telebot.types.InlineKeyboardButton(text=f'{NUM[3]}‚úñÔ∏è{NUM[6]}', callback_data='current_emoji'))
			markup.add(telebot.types.InlineKeyboardButton(text='üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏', callback_data='get_tip_not_delete'))
			field.draw_sudoku(puzzle=database.getUserPuzzle(username), current=database.getUserCurrent(username), theme=database.getTheme(username))
			photo = open(database.others + 'sudoku.jpg', 'rb')
			bot.send_photo(message.chat.id, photo, reply_markup=markup)
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º —Ç–µ–∫—É—â–µ–µ —Å—É–¥–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É', reply_markup=markup)


@bot.message_handler(commands=['current_sudoku'])
def current_sudoku(message):
	if validate(message):
		username = '@' + message.from_user.username

		if database.isUserPlay(username):
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='[9, 0, 5]', callback_data='current_text'), telebot.types.InlineKeyboardButton(text=f'{NUM[3]}‚úñÔ∏è{NUM[6]}', callback_data='current_emoji'), telebot.types.InlineKeyboardButton(text='üåá', callback_data='current_photo'))
			bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:', reply_markup=markup)
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º —Ç–µ–∫—É—â–µ–µ —Å—É–¥–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É', reply_markup=markup)


@bot.message_handler(commands=['initial_text'])
def initial_text(message):
	if validate(message):
		username = '@' + message.from_user.username
		
		if database.isUserPlay(username):
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text=f'{NUM[3]}‚úñÔ∏è{NUM[6]}', callback_data='initial_emoji'), telebot.types.InlineKeyboardButton(text='üåá', callback_data='initial_photo'))
			markup.add(telebot.types.InlineKeyboardButton(text='üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏', callback_data='get_tip_not_delete'))
			bot.send_message(message.chat.id, sudoku.getStrPuzzle(database.getUserPuzzle(username)), reply_markup=markup)
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å—É–¥–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É', reply_markup=markup)


@bot.message_handler(commands=['initial_emoji'])
def initial_emoji(message):
	if validate(message):
		username = '@' + message.from_user.username
		
		if database.isUserPlay(username):
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='[9, 0, 5]', callback_data='initial_text'), telebot.types.InlineKeyboardButton(text='üåá', callback_data='initial_photo'))
			markup.add(telebot.types.InlineKeyboardButton(text='üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏', callback_data='get_tip_not_delete'))
			bot.send_message(message.chat.id, convert_to_emoji(database.getUserPuzzle(username)), reply_markup=markup)
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å—É–¥–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É', reply_markup=markup)


@bot.message_handler(commands=['initial_photo'])
def initial_photo(message):
	if validate(message):
		username = '@' + message.from_user.username
		
		if database.isUserPlay(username):
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='[9, 0, 5]', callback_data='initial_text'), telebot.types.InlineKeyboardButton(text=f'{NUM[3]}‚úñÔ∏è{NUM[6]}', callback_data='initial_emoji'))
			markup.add(telebot.types.InlineKeyboardButton(text='üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏', callback_data='get_tip_not_delete'))
			field.draw_sudoku(puzzle=database.getUserPuzzle(username), current=database.getUserPuzzle(username), theme=database.getTheme(username))
			photo = open(database.others + 'sudoku.jpg', 'rb')
			bot.send_photo(message.chat.id, photo, reply_markup=markup)
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å—É–¥–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É', reply_markup=markup)


@bot.message_handler(commands=['initial_sudoku'])
def initial_sudoku(message):
	if validate(message):
		username = '@' + message.from_user.username
		
		if database.isUserPlay(username):
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='[9, 0, 5]', callback_data='initial_text'), telebot.types.InlineKeyboardButton(text=f'{NUM[3]}‚úñÔ∏è{NUM[6]}', callback_data='initial_emoji'), telebot.types.InlineKeyboardButton(text='üåá', callback_data='initial_photo'))
			bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', reply_markup=markup)
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–Ø –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å—É–¥–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É', reply_markup=markup)


@bot.message_handler(commands=['give_up'])
def give_up(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username

	if database.isUserPlay(username):
		AI.recount_level(username, True)
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='–ù–æ–≤–æ–µ —Å—É–¥–æ–∫—É', callback_data='next_sudoku'))
		bot.send_message(message.chat.id, '–í—ã —Å–¥–∞–ª–∏—Å—å. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É', reply_markup=markup)
		database.resetUserTime(username)
	else:
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É')


@bot.message_handler(commands=['next_sudoku'])
def next_sudoku(message):
	if not validate(message):
		return
	username = '@' + message.from_user.username
	
	if database.isUserPlay(username):
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='current_photo'), telebot.types.InlineKeyboardButton(text='üè≥Ô∏è –°–¥–∞—Ç—å—Å—è', callback_data='give_up'))
		markup.add(telebot.types.InlineKeyboardButton(text='üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏', callback_data='get_tip'))
		bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–±–æ—Ä–∫—É –ø—Ä–æ—à–ª–æ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —Å —Ä–µ—à–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å—É–¥–æ–∫—É, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏–ª–∏ —Å–¥–∞—Ç—å—Å—è.', reply_markup=markup)
	else:
		database.nextPuzzle(username)
		database.setUserTime(datetime.datetime.today(), username)
		initial_photo(message)


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
	message = call.message
	message.from_user = call.from_user

	#bot.answer_callback_query(callback_query_id=call.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç!')
	if call.data == 'possible':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		possible(message)
	if call.data == 'possible_not_delete':
		possible(message)
	if call.data == 'change_mode':
		change_mode(message)
	if call.data == 'another_format':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		current_sudoku(message)
	if call.data in ['menu', 'back_to_menu']:
		bot.delete_message(call.message.chat.id, call.message.message_id)
		menu(message)
	if call.data == 'back_to_menu_clean':
		menu(message)
	if call.data == 'raitings':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		raitings(message, True)
	if call.data == 'level_raiting':
		level_raiting(message)
	if call.data == 'score_raiting':
		score_raiting(message)
	if call.data == 'success_raiting':
		success_raiting(message)
	if call.data == 'count_raiting':
		count_raiting(message)
	if call.data == 'stats':
		stats(message)
	if call.data == 'history':
		history(message)
	if call.data == 'level_graphics':
		level_graphics(message)
	if call.data == 'my_level':
		my_level(message)
	if call.data == 'my_score':
		my_score(message)
	if call.data == 'my_rank':
		my_rank(message)
	if call.data == 'methods':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		methods(message, True)
	if call.data == 'authors':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		authors(message)
	if call.data == 'system':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		system(message)
	if call.data == 'rules':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		rules(message)
	if call.data == 'manual':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		manual(message)
	if call.data == 'help':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		help(message, True)
	if call.data == 'back_to_help':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		help(message)
	if call.data == 'next_sudoku_from_manual':
		for i in range(0, 8):
			bot.delete_message(call.message.chat.id, call.message.message_id - i)
		next_sudoku(message)
	if call.data == 'back_to_help_from_manual':
		for i in range(0, 8):
			bot.delete_message(call.message.chat.id, call.message.message_id - i)
		help(message)
	if call.data == 'next_sudoku_not_delete':
		if database.isUserPlay('@' + call.from_user.username):
			next_sudoku(message)
		else:
			next_sudoku(message)
			bot.answer_callback_query(callback_query_id=call.id, text='–í—Ä–µ–º—è –ø–æ—à–ª–æ!')	
	if call.data == 'next_sudoku':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		if database.isUserPlay('@' + call.from_user.username):
			next_sudoku(message)
		else:
			next_sudoku(message)
			bot.answer_callback_query(callback_query_id=call.id, text='–í—Ä–µ–º—è –ø–æ—à–ª–æ!')		
	if call.data == 'password':
		password(message)		
	if call.data == 'give_up':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		give_up(message)
	if call.data == 'reg':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		start(message)
	if call.data == 'records':
		records(message)
	if call.data == 'back':
		bot.delete_message(call.message.chat.id, call.message.message_id)
	if call.data == 'get_tip_not_delete':
		get_tip(message)
	if call.data == 'get_tip':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		get_tip(message)
	if call.data == 'current_sudoku':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		current_sudoku(message)
	if call.data == 'current_sudoku_not_delete':
		current_sudoku(message)
	if call.data == 'initial_sudoku':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		initial_sudoku(message)
	if call.data == 'current_text':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		current_text(message)
	elif call.data == 'current_emoji':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		current_emoji(message)
	elif call.data == 'current_photo':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		current_photo(message)
	elif call.data == 'current_photo_not_delete':
		current_photo(message)
	elif call.data == 'initial_text':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		initial_text(message)
	elif call.data == 'initial_emoji':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		initial_emoji(message)
	elif call.data == 'initial_photo':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		initial_photo(message)
	elif call.data == 'initial_photo_not_delete':
		initial_photo(message)
	elif call.data == 'check_correctness':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		check_correctness(message)
		bot.answer_callback_query(callback_query_id=call.id, text='–ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã –∑–µ–ª—ë–Ω—ã–º —Ü–≤–µ—Ç–æ–º, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ - –∫—Ä–∞—Å–Ω—ã–º, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ —Å–æ–≤—Å–µ–º –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –Ω–µ –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã.', show_alert=True)
	elif call.data == 'open_cell':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		open_cell(message)
	elif call.data == 'change_theme':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		change_theme(message, True)
	elif call.data[:12] == 'change_theme':
		database.setTheme(call.data[13:], '@' + call.message.from_user.username)
		bot.answer_callback_query(callback_query_id=call.id, text='–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!')
	elif call.data[:-2] == 'open_cell_row':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		row = int(call.data[-1])
		username = '@' + call.message.from_user.username

		if database.getUserPuzzle(username)[row].count(0) == 0:
			return
		markup = telebot.types.InlineKeyboardMarkup()
		empty_cols = []
		for j, num in enumerate(database.getUserPuzzle(username)[row]):
			if num == 0:
				empty_cols.append(telebot.types.InlineKeyboardButton(text=f'{j + 1}-–π —Å—Ç–æ–ª–±–µ—Ü', callback_data='open_cell_col_' + str(row) + '_'+ str(j)))
		markup.add(*empty_cols)
		markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='open_cell'))

		field.draw_sudoku(puzzle=database.getUserPuzzle(username), current=database.getUserCurrent(username), solution=None, theme=database.getTheme(username))
		bot.send_photo(message.chat.id, open(database.others + 'sudoku.jpg', 'rb'), f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {row + 1}-–π —Ä—è–¥, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ —ç—Ç–æ–º —Ä—è–¥—É:', reply_markup=markup)
	elif call.data[:-4] == 'open_cell_col':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		row = int(call.data[-3])
		col = int(call.data[-1])
		username = '@' + call.message.from_user.username
		if database.getUserPuzzle(username)[row][col] != 0:
			return
		database.updateUserPuzzle(row, col, username)
		field.draw_sudoku(puzzle=database.getUserPuzzle(username), current=database.getUserCurrent(username), opened=(row, col), theme=database.getTheme(username))
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='current_photo_not_delete'))
		bot.send_photo(message.chat.id, open(database.others + 'sudoku.jpg', 'rb'), reply_markup=markup)
		bot.answer_callback_query(callback_query_id=call.id, text=f'–ö–ª–µ—Ç–∫–∞ –≤ {row + 1}-–æ–º —Ä—è–¥—É, {col + 1}-–æ–º —Å—Ç–æ–ª–±—Ü–µ –æ—Ç–∫—Ä—ã—Ç–∞')
	elif call.data == 'delete_me':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		unreg(message)


@bot.edited_message_handler(func=lambda message: True)
@bot.message_handler(content_types=['text'])
def text_message(message):
	if validate(message):
		username = '@' + message.from_user.username

		if message.text[0] == '/':
			bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —è –Ω–µ –∑–Ω–∞—é, –ø–æ–ø–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–∏—Å–∫–æ–º –∫–æ–º–º–∞–Ω–¥ –∏–ª–∏ –º–µ–Ω—é')
		elif message.text[0] == '@':
			data = message.text.split(' ')
			if username == data[0]:
				bot.send_message(message.chat.id, '–ù–µ –Ω—É –Ω–µ —Å–≤–æ–π –∂–µ –Ω–∏–∫ –≤–≤–æ–¥–∏—Ç—å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ')
			elif database.isUserPlay(username):
				markup = telebot.types.InlineKeyboardMarkup()
				markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='current_photo'), telebot.types.InlineKeyboardButton(text='üè≥Ô∏è –°–¥–∞—Ç—å—Å—è', callback_data='give_up'))
				bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–±–æ—Ä–∫—É —Å—É–¥–æ–∫—É, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', reply_markup=markup)
			elif len(data) != 2:
				bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (—Å–º. –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—é –¥–∞–Ω–Ω—ã—Ö)')
			elif not database.isUserExist(data[0]):
				bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
			elif data[1] != database.getPassword(data[0]):
				database.updatePassword(data[0])
				bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–∞—Ä–æ–ª—å –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω')
			else:
				database.recovery(username, data[0], data[1])
				bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
		elif database.isUserPlay(username):
			puzzle_1 = checkTextMessage(message)
			puzzle_2 = checkEmojiMessage(message)
			puzzle = None

			if type(puzzle_1) is str and type(puzzle_2) is str:
				bot.send_message(message.chat.id, puzzle_1)
				return
			elif type(puzzle_1) is not str:
				puzzle = puzzle_1
			else:
				puzzle = puzzle_2

			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='current_photo'), telebot.types.InlineKeyboardButton(text='üè≥Ô∏è –°–¥–∞—Ç—å—Å—è', callback_data='give_up'))

			if not sudoku.are_equal(puzzle, database.getUserPuzzle(username)):
				bot.send_message(message.chat.id, '–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ç–æ —Å—É–¥–æ–∫—É', reply_markup=markup)
			elif not sudoku.isCorrect(puzzle):
				field.draw_sudoku(puzzle=database.getUserPuzzle(username), current=puzzle, invalid=True, theme=database.getTheme(username))
				photo = open(database.others + 'sudoku.jpg', 'rb')
				bot.send_photo(message.chat.id, photo)
				bot.send_message(message.chat.id, '–°—É–¥–æ–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏ (–ø–æ–≤—Ç–æ—Ä —Å –±–ª–æ–∫–µ/—Å—Ç—Ä–æ–∫–µ/—Å—Ç–æ–ª–±—Ü–µ)', reply_markup=markup)	
			elif not sudoku.isSolved(puzzle):
				database.setUserCurrent(puzzle, username)
				current_photo(message)
			elif database.isCorrectSolution(puzzle, username):
				database.setUserCurrent(puzzle, username)
				field.draw_sudoku(puzzle=database.getUserPuzzle(username), solution=database.getUserCurrent(username), solved=True, theme=database.getTheme(username))

				time = database.convert(database.solvingTime(username))
				markup = telebot.types.InlineKeyboardMarkup()
				markup.add(telebot.types.InlineKeyboardButton(text='–ù–æ–≤–æ–µ —Å—É–¥–æ–∫—É', callback_data='next_sudoku_not_delete'))
				bot.send_photo(message.chat.id, open(database.others + 'sudoku.jpg', 'rb'), '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–∏–ª–∏ —Å—É–¥–æ–∫—É!\n–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: {}' . format(time), reply_markup=markup)

				diff = database.getUserLevel(username)
				time = database.solvingTime(username)

				if database.is_new_record(time, diff):
					prev = database.get_record(diff)
					bot.send_message(message.chat.id, f'üèÜ–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∫–æ—Ä–¥:\n{database.getUserLevel(username):.0f}:  {prev[0]} - {prev[1]}')
					database.update_record(time, diff, username)

				AI.recount_level(username)
				database.resetUserTime(username)
			else:
				bot.send_message(message.chat.id, '–£–≤—ã, –Ω–æ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ')
		else:
			markup = telebot.types.InlineKeyboardMarkup()
			markup.add(telebot.types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—ã', callback_data='next_sudoku'))
			bot.send_message(message.chat.id, '–í—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É', reply_markup=markup)


def validate(message) -> bool:
	if not message.from_user.username:
		bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –Ω–µ –∑–∞–¥–∞–Ω username (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∏–¥–∞ @User). –ü–æ–∫–∞ username –Ω–µ –∑–∞–¥–∞–Ω, —è –Ω–µ –º–æ–≥—É –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
		return False
	elif not database.isUserExist('@' + message.from_user.username):
		markup = telebot.types.InlineKeyboardMarkup()
		markup.add(telebot.types.InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='reg'))
		bot.send_message(message.chat.id, '–í—ã –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π.', reply_markup=markup)
		return False
	else:
		database.udateLastUserActivity('@' + message.from_user.username)
		return True


def alert():
	while True:
		for user in database.unactive_users(14):
			try:
				bot.send_message(database.getID(user), '–û—Ç –≤–∞—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –º–Ω–µ –ø—Ä–∏—à–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–∞—Å –∏–∑ –±–∞–∑—ã –¥—ã–Ω–Ω—ã—Ö')
			except telebot.apihelper.ApiException:
				pass
			database.deleteUser(user)
			print(f'DELETED: {user}')
		for user in database.unactive_users(2):
			if database.isUserPlay(user):
				AI.recount_level(user, True)
			database.resetUserTime(user)
			if (datetime.datetime.today() - database.getLastUserAlert(user)).days >= 1:
				delta = datetime.datetime.today() - database.getLastUserActivity(user)
				print(f'ALERTED: {user} {delta}')
				try:
					bot.send_message(database.getID(user), f'–û—Ç –≤–∞—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {delta.days} –¥–Ω–µ–π –∏ {delta.seconds // 3600} —á–∞—Å–∞(–æ–≤) –Ω–µ –±—ã–ª–æ –Ω–∏–∫–∞–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.')
					markup = telebot.types.InlineKeyboardMarkup()
					markup.add(telebot.types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data='delete_me'))
					bot.send_message(database.getID(user), '–ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é 14 —Å—É—Ç–æ–∫ –º–Ω–µ –ø—Ä–∏–π–¥–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –≤–∞—Å –∏ –≤—Å–µ –≤–∞—à–∏ –∏–≥—Ä–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã —Å –ø–æ—Ç–µ—Ä–µ–π –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª–∏–≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å', reply_markup=markup)
				except telebot.apihelper.ApiException:
					database.deleteUser(user)
				else:
					database.udateLastUserAlert(user)
		sleep(60)

#start_new_thread(alert, ())
start_new_thread(backup.run, ())

bot.polling(none_stop = True, interval = 0)
# python C:\Users\HP_650\Desktop\Python_BOT\bot.py
